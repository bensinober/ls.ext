import com.bmuschko.gradle.docker.tasks.image.*

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'cpd'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'gradle-one-jar'
apply plugin: 'com.bmuschko.docker-remote-api'

group = 'no.deichman.services'
version = '1.0-SNAPSHOT'
description = "services"

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven {
        url "http://xss-html-filter.sf.net/releases/"
        name "xss-html-filter.sf.net releases"
    }
    maven {
        url "https://maven.nuxeo.org/nexus/content/groups/public/"
        name "nexeo"
    }
}

configurations {
    // We're logging with slf4j api and log4j2 backend so all other backends must be removed
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.slf4j', module: 'slf4j-nop'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'commons-logging'

}

def version_jetty = '9.4.2.v20170220'
def version_jersey = '2.22.1'
def version_jackson = '2.8.7'
def version_slf4j = '1.7.25'
def version_jena = '3.4.0'
def version_commons_lang = '3.5'
def version_commons_io = '2.5'

dependencies {

    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: version_jetty
    compile group: 'org.eclipse.jetty', name: 'jetty-util', version: version_jetty
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: version_jetty
    compile group: 'org.glassfish.jersey.core', name: 'jersey-server', version: version_jersey
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: version_jersey
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version: version_jersey
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: version_jersey
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: version_jackson
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-smile', version: version_jackson
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: version_jackson
    compile group: 'org.apache.jena', name: 'apache-jena-libs', version: version_jena
    compile group: 'commons-io', name: 'commons-io', version: version_commons_io
    compile group: 'org.apache.commons', name: 'commons-lang3', version: version_commons_lang
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile('info.freelibrary:freelib-marc4j:2.6.12') {
        transitive = false
    }
    compile group: 'com.google.guava', name: 'guava', version: '21.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4+' // unirest has issues with 4.2
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4+' // unirest has issues with 4.2
    compile group: 'org.apache.httpcomponents', name: 'httpclient-cache', version: '4.5+' // unirest has issues with 4.2

    // We're logging with slf4j api and log4j2 backend
    compile group: 'org.slf4j', name: 'slf4j-api', version: version_slf4j
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: version_slf4j
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: version_slf4j
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: version_jetty
    compile group: 'org.eclipse.jetty', name: 'jetty-annotations', version: version_jetty
    compile group: 'org.eclipse.jetty', name: 'apache-jsp', version: version_jetty
    compile group: 'joda-time', name: 'joda-time', version: '2.9.7'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.19'
    testCompile group: 'com.github.rest-driver', name: 'rest-client-driver', version: '2.0.0'
    testCompile group: 'uk.co.datumedge', name: 'hamcrest-json', version: '0.2'

    testCompile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    testCompile group: 'pl.allegro.tech', name: 'embedded-elasticsearch', version: '2.1.0'
}

task oneJar(type: OneJar) {
    mainClass = 'no.deichman.services.App'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

check.dependsOn test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.enabled = false
    reports.html.enabled = false
}

task allTestsExceptAppTest(type: Test) {
    exclude 'no/deichman/services/services/AppTest.class'
}

task testAppTest(type: Test) {
    include 'no/deichman/services/services/AppTest.class'
}

test {
    exclude '**'
}

test.dependsOn allTestsExceptAppTest, testAppTest

checkstyle {
    configProperties = [samedir: "${rootDir}"]
    toolVersion = '7.6'
}

pmd {
    consoleOutput = true
    toolVersion = '5.5.4'
}

cpd {
    toolVersion = '5.5.4'
    ignoreIdentifiers = true
    ignoreLiterals = true

    ignoreFailures = true // not failing the build for now
}

cpdCheck {
    reports {
        text.enabled = true
        xml.enabled = false
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url '~/.m2/repository' }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath 'de.aaschmid:gradle-cpd-plugin:1.0'
        classpath 'com.bmuschko:gradle-docker-plugin:3.1.0'
    }
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                configuration.resolve()
            }
            subProject.configurations.each { configuration ->
                configuration.resolve()
            }
        }
    }
}

task copyJar(type: Copy) {
    dependsOn 'oneJar'
    from "build/libs/services-${project.version}-standalone.jar"
    into 'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        ignoreExitValue = true
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn copyJar
    inputDir = file('.')
    tag = "digibib/redef-services:${getGitHash()}"
}

buildDockerImage.dependsOn copyJar

